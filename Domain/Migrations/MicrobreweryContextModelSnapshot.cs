// <auto-generated />
using Domain;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Domain.Migrations
{
    [DbContext(typeof(MicrobreweryContext))]
    partial class MicrobreweryContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Domain.Beer", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<decimal>("Abv");

                    b.Property<bool>("IsGlutenFree");

                    b.Property<Guid?>("MicrobreweryId");

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("MicrobreweryId");

                    b.ToTable("Beer");
                });

            modelBuilder.Entity("Domain.Microbrewery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("FoundedOn");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name");

                    b.Property<int>("NumberOfStills");

                    b.Property<string>("Owner");

                    b.HasKey("Id");

                    b.ToTable("Microbrewery");
                });

            modelBuilder.Entity("Domain.Beer", b =>
                {
                    b.HasOne("Domain.Microbrewery")
                        .WithMany("Beers")
                        .HasForeignKey("MicrobreweryId");
                });
#pragma warning restore 612, 618
        }
    }
}
